@startuml "Triptop Travel Booking - Full System with API Versioning & JSON Schema"

class Traveler {
    """Een persoon die een reis plant en boekt."""
    +planTrip()
    +confirmBooking()
}

class WebApp {
    """Een webApp waarmee gebruikers reizen kunnen plannen en boeken."""
    +displayTripOptions()
    +sendBookingRequest()
    +displayBookingConfirmation()
}

interface APIService {
    """Interface voor het verwerken van API-verzoeken."""
    +handleRequest(request: Request): Response
}

class APIGateway implements APIService {
    """Route API-verzoeken naar de juiste microservices."""
    +routeRequest()
}

class TripService {
    """Beheert reiscreatie, beschikbaarheid en opslag."""
    +createDraftTrip()
    +checkAvailability()
    +storeTrip()
}

interface ServiceAdapter {
    """Interface voor het communiceren met externe services."""
    +queryExternalService()
}

class AccommodationAdapterAPIV1 implements ServiceAdapter {
    """Adapter voor accommodaties - versie 1."""
    +queryExternalService()
    +checkDataFormat()
    +translateDataFormat()
}

class AccommodationAdapterAPIV2 implements ServiceAdapter {
    """Adapter voor accommodaties - versie 2."""
    +queryExternalService()
    +checkDataFormat()
    +translateDataFormat()
}

class ActivityAdapter implements ServiceAdapter {
    """Adapter voor het ophalen van activiteiten."""
    +queryExternalService()
    +checkDataFormat()
    +translateDataFormat()
    +postData()
}

class PaymentService {
    """Verwerkt betalingen voor boekingen."""
    +processPayment()
}

class Database {
    """Beheert de opslag en het ophalen van reisgegevens."""
    +storeData()
    +retrieveData()
}

class ExternalAccommodationServices {
    """Externe systemen zoals Booking.com en Airbnb voor accommodaties."""
    +provideAvailability()
}

class ExternalActivityServices {
    """Externe systemen zoals GetYourGuide en Tripadvisor voor activiteiten."""
    +provideActivities()
}

class ExternalPaymentProcessors {
    """Externe betalingsverwerkers zoals iDEAL, PayPal en creditcardbedrijven."""
    +processPayment()
}

class SchemaValidator <<utility>> {
    """Valideert JSON-data tegen een JSON-schema."""
    +validateData(data: Object, schema: JSONSchema)
}

class VersionManager <<utility>> {
    """Beheert API-versies en routeert verzoeken naar de juiste adapter."""
    +getSchemaVersion(request: Request): String
    +routeToAdapter(version: String)
}

Traveler --> WebApp : uses
WebApp --> APIGateway : sends requests
APIGateway --> TripService : routes requests
TripService --> VersionManager : determines API version
VersionManager --> AccommodationAdapterAPIV1 : if v1
VersionManager --> AccommodationAdapterAPIV2 : if v2
TripService --> ActivityAdapter : requests availability
TripService --> Database : stores trip
AccommodationAdapterAPIV1 --> SchemaValidator : validates v1
AccommodationAdapterAPIV2 --> SchemaValidator : validates v2
AccommodationAdapterAPIV1 --> ExternalAccommodationServices : queries
AccommodationAdapterAPIV2 --> ExternalAccommodationServices : queries
ActivityAdapter --> ExternalActivityServices : queries
WebApp --> Traveler : displays confirmation
APIGateway --> PaymentService : sends payment request
PaymentService --> ExternalPaymentProcessors : processes payment
TripService --> APIGateway : sends booking confirmation
APIGateway --> WebApp : returns response


@enduml
